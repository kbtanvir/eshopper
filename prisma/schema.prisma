generator client {
    provider        = "prisma-client-js"
   
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    role          Role          @default(USER)
    accounts      Account[]
    sessions      Session[]
    wishlist      Wishlist[]
    userAddress   UserAddress[]
}

enum Role {
    USER
    ADMIN
    SUPER_ADMIN
}

// @SECTION: Ecommerce Models
// ------------------------------------------------------------ 

model UserAddress {
    user      User?    @relation(fields: [userId], references: [id])
    userId    String
    name      String
    email     String   @unique
    address   String
    city      String
    state     String
    country   String
    zipcode   String
    phone     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    orders    Order[]

    @@id([email])
    @@index([userId])
}

model Product {
    id           String     @id @default(cuid())
    title        String
    description  String
    price        Float
    image        String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    isDeleted    Boolean    @default(false)
    inStock      Boolean
    sizes        Size[]
    wishlist     Wishlist[]
    cartItem     CartItem[]
    categories   Category[]
    discount     Discount?  @relation(fields: [discountCode], references: [code])
    discountCode String?

    @@unique([createdAt, id])
    @@index([discountCode])
}

model Category {
    id       String    @id @default(cuid())
    name     String
    products Product[]

    @@unique([name])
}

model Size {
    id          String    @default(cuid())
    name        String    @id
    description String?
    products    Product[]

    @@unique([name])
}

model Discount {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    code      String
    amount    Float
    expires   DateTime
    products  Product[]

    @@unique([code])
}

model Wishlist {
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String

    @@id([userId, productId])
    @@index([productId])
    @@index([userId])
}

model CartItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId   String?
    qty       Int
    productId String
    product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@index([productId])
    @@index([orderId])
}

model Order {
    id             String      @id @default(cuid())
    email          String
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt
    total          Float?
    status         String?
    billingAddress UserAddress @relation(fields: [email], references: [email])
    items          CartItem[]
    payment        Payment     @relation(fields: [paymentId], references: [id])
    paymentId      String

    @@index([email])
    @@index([paymentId])
}

model Payment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    order     Order[]
    orderId   String?
    status    String
    amount    Float
    provider  String

    @@index([orderId])
}

// @SECTION: CMS Models
// ------------------------------------------------------------ 

model Taxonomy {
    id          String     @id @default(cuid())
    name        String
    description String?
    parent      Taxonomy?  @relation("TaxonomyToTaxonomy", fields: [parentId], references: [id])
    parentId    String?
    children    Taxonomy[] @relation("TaxonomyToTaxonomy")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([name])
    @@index([parentId])
}

model Site {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    header    Header   @relation(fields: [headerId], references: [id])
    headerId  String
    footer    Footer   @relation(fields: [footerId], references: [id])
    footerId  String
}

model Header {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Site        Site[]
}

model Footer {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Site        Site[]
}

// @SECTION: Blog Models
// ------------------------------------------------------------

model Bookmark {
    id         String    @id @default(cuid())
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    business   Resource? @relation(fields: [businessId], references: [id])
    businessId String?

    @@index([businessId])
}

model Resource {
    id           String              @id @default(cuid())
    name         String
    createdAt    DateTime            @default(now())
    updatedAt    DateTime            @updatedAt
    logo         String?
    coverImage   String?
    gallery      String[]
    l1           String?
    l2           String?
    l3           String?
    l1Term       ProfessionCategory? @relation("ResourceL1Term", fields: [l1], references: [name])
    l2Term       ProfessionCategory? @relation("ResourceL2Term", fields: [l2], references: [name])
    l3Term       ProfessionCategory? @relation("ResourceL3Term", fields: [l3], references: [name])
    info         PersonalInfo?       @relation(fields: [infoId], references: [id])
    infoId       String?
    rating       Float?
    reviews      Review[]
    reviewsCount Int?
    source       Source?             @relation(fields: [sourceId], references: [id])
    sourceId     String?
    bookMark     Bookmark[]
    owner        BusinessOwner?      @relation(fields: [ownerId], references: [id])
    ownerId      String?

    @@index([infoId])
    @@index([sourceId])
    @@index([ownerId])
    @@index([l1])
    @@index([l2])
    @@index([l3])
    @@index([name])
}

model BusinessOwner {
    id             String        @id @default(cuid())
    name           String
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    personalInfo   PersonalInfo? @relation(fields: [personalInfoId], references: [id])
    personalInfoId String?
    business       Resource[]

    @@index([personalInfoId])
}

model Source {
    id        String     @id @default(cuid())
    name      String
    logo      String?
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    business  Resource[]
}

model ProfessionCategory {
    id         String   @id @default(cuid())
    name       String   @unique
    level      Int
    coverImage String?
    icon       String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    parentId   String?  @unique
    locationId String?

    rl1 Resource[] @relation("ResourceL1Term")
    rl2 Resource[] @relation("ResourceL2Term")
    rl3 Resource[] @relation("ResourceL3Term")

    @@index([name])
}

model PersonalInfo {
    id             String          @id @default(cuid())
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    name           String?
    emails         String[]
    phones         String[]
    website        String?
    address        String?
    displayAddress String?
    city           String?
    state          String?
    zip            String?
    country        String?
    longitude      Float?
    latitude       Float?
    business       Resource[]
    businessOwner  BusinessOwner[]
}

model Review {
    id         String    @id @default(cuid())
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    rating     Int
    comment    String
    business   Resource? @relation(fields: [businessId], references: [id])
    businessId String?

    @@index([businessId])
}

model YelpData {
    id        String @id @default(cuid()) // Yelp Business ID
    name      String
    apiData   String
    localData String
}
