// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    // Do not use foreign keys (PlanetScale does not support them)
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    wishlist      Wishlist?
    wishlistId    String?
    products      Product[]
    cartItem      CartItem[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id          String     @id @default(cuid())
    title       String
    description String
    price       Float
    image       String
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    isDeleted   Boolean    @default(false)
    userId      String
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    inStock     Boolean
    sizes       Size[]
    wishlistId  String?
    wishlist    Wishlist?  @relation(fields: [wishlistId], references: [id])
    cartItem    CartItem[]

    @@unique([createdAt, id])
    @@index([userId])
    @@index([wishlistId])
}

model Size {
    id          String    @id @default(cuid())
    name        String
    description String?
    products    Product[]

    @@unique([name])
}

model Wishlist {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    userId    String
    products  Product[]
    User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
    @@index([userId])
}

model CartItem {
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    qty       Int

    @@id([userId, productId])
    @@index([productId])
    @@index([userId])
}
